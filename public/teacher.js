// teacher.js (S·ª≠ d·ª•ng ESM)

// Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p gi√°o vi√™n
export function checkTeacherLogin() {
    if (localStorage.getItem("teacherLoggedIn") === "true") {
        document.getElementById('teacherLogin').style.display = 'none';
        document.getElementById('teacherPanel').style.display = 'block';
    }
}

// üöÄ ƒêƒÉng nh·∫≠p gi√°o vi√™n
export function loginTeacher() {
    const password = document.getElementById('teacherPassword').value;
    if (password === "admin123") { // üîë Thay b·∫±ng m·∫≠t kh·∫©u b·∫£o m·∫≠t h∆°n
        localStorage.setItem("teacherLoggedIn", "true");
        document.getElementById('teacherLogin').style.display = 'none';
        document.getElementById('teacherPanel').style.display = 'block';
    } else {
        alert("‚ùå M·∫≠t kh·∫©u sai!");
    }
}

// üöÄ T·∫£i danh s√°ch h·ªçc sinh
export async function fetchStudents() {
    try {
        const response = await fetch('/api/get-students');
        const students = await response.json();
        const tableBody = document.querySelector("#studentsTable tbody");
        tableBody.innerHTML = "";
        students.forEach((student, index) => {
            const row = `<tr>
                <td>${index + 1}</td>
                <td>${student.id}</td>
                <td>${student.name}</td>
                <td><button onclick="deleteStudent('${student.id}')">‚ùå</button></td>
            </tr>`;
            tableBody.innerHTML += row;
        });
    } catch (error) {
        console.error('‚ùå L·ªói t·∫£i danh s√°ch h·ªçc sinh:', error);
    }
}

// üöÄ Th√™m h·ªçc sinh m·ªõi
export async function addStudent() {
    const id = document.getElementById('newStudentId').value;
    const name = document.getElementById('newStudentName').value;
    if (!id || !name) {
        alert("‚ö† Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß ID v√† t√™n h·ªçc sinh.");
        return;
    }
    const students = await fetch('/api/get-students').then(res => res.json());
    students.push({ id, name });
    await fetch('/api/save-students', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ students })
    });
    alert("‚úÖ H·ªçc sinh ƒë√£ ƒë∆∞·ª£c th√™m!");
    fetchStudents();
}

// üöÄ X√≥a h·ªçc sinh
export async function deleteStudent(studentId) {
    let students = await fetch('/api/get-students').then(res => res.json());
    students = students.filter(student => student.id !== studentId);
    await fetch('/api/save-students', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ students })
    });
    alert("‚úÖ H·ªçc sinh ƒë√£ b·ªã x√≥a!");
    fetchStudents();
}

// üöÄ T·∫£i danh s√°ch b√†i t·∫≠p
export async function fetchProblems() {
    const problems = await fetch('/api/get-problems').then(res => res.json());
    const tableBody = document.querySelector("#problemsTable tbody");
    tableBody.innerHTML = "";
    problems.forEach((problem, index) => {
        const row = `<tr>
            <td>${index + 1}</td>
            <td>${problem}</td>
            <td><button onclick="deleteProblem(${index})">‚ùå</button></td>
        </tr>`;
        tableBody.innerHTML += row;
    });
}

// üöÄ Th√™m b√†i t·∫≠p
export async function addProblem() {
    const text = document.getElementById('newProblemText').value;
    if (!text) {
        alert("‚ö† Vui l√≤ng nh·∫≠p n·ªôi dung b√†i t·∫≠p.");
        return;
    }
    const problems = await fetch('/api/get-problems').then(res => res.json());
    problems.push(text);
    await fetch('/api/save-problems', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ problems })
    });
    alert("‚úÖ B√†i t·∫≠p ƒë√£ ƒë∆∞·ª£c th√™m!");
    fetchProblems();
}

// ƒê·∫£m b·∫£o ch·∫°y khi DOM ƒë√£ t·∫£i xong
document.addEventListener('DOMContentLoaded', () => {
    checkTeacherLogin();
});
