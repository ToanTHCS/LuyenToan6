let currentKeyIndex = 0;  // Bi·∫øn ƒë·ªÉ theo d√µi API key ƒëang s·ª≠ d·ª•ng
let apiKeys = [];  // Bi·∫øn l∆∞u API keys

let base64Image = ""; // Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u ·∫£nh b√†i l√†m
let progressData = {}; // Bi·∫øn l∆∞u ti·∫øn tr√¨nh h·ªçc sinh
let currentProblem = null; // Bi·∫øn l∆∞u b√†i t·∫≠p hi·ªán t·∫°i
let isGrading = false; // Bi·∫øn tr·∫°ng th√°i ƒë·ªÉ ch·ªëng spam

function formatProblemText(problemText) {
    return problemText.replace(/\n/g, '<br>').replace(/([a-d]\))/g, '<br>$1');
}
// T·∫£i API keys t·ª´ server
async function loadApiKeys() {
    try {
        const response = await fetch('/api/get-api-keys'); // G·ªçi API get-api-keys
        if (!response.ok) {
            throw new Error('Kh√¥ng th·ªÉ t·∫£i API keys');
        }
        const data = await response.json();
        apiKeys = data.apiKeys;  // L·∫•y d·ªØ li·ªáu API keys
        console.log('API Keys:', apiKeys);

        if (apiKeys.length === 0) {
            console.error("Kh√¥ng c√≥ API keys h·ª£p l·ªá.");
        } else {
            console.log(`C√≥ ${apiKeys.length} API keys h·ª£p l·ªá.`);
        }
    } catch (error) {
        console.error('L·ªói khi t·∫£i API keys:', error);
    }
}

// H√†m kh·ªüi t·∫°o trang h·ªçc sinh
async function initStudentPage() {
    const studentId = localStorage.getItem("studentId");
    if (!studentId) {
        alert("‚ö† B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        window.location.href = "index.html"; // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p
        return;
    }

    console.log(`üîπ ƒêang t·∫£i d·ªØ li·ªáu h·ªçc sinh: ${studentId}`);
    await loadStudentData(studentId);
    await loadProblems();
    await loadProgress(studentId);
    console.log("‚úÖ Trang h·ªçc sinh ƒë√£ kh·ªüi t·∫°o ho√†n t·∫•t!");
}

// H√†m t·∫£i d·ªØ li·ªáu h·ªçc sinh t·ª´ `students.json`
const loadStudentData = async (studentId) => {
    try {
        const response = await fetch('/api/get-students');
        if (!response.ok) {
            throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch h·ªçc sinh.");
        }
        const studentsObject = await response.json();  // L·∫•y d·ªØ li·ªáu t·ª´ API

        const students = Object.keys(studentsObject).map(key => ({
            id: key,
            name: studentsObject[key].name,
            role: studentsObject[key].role
        }));

        console.log("‚úÖ Danh s√°ch h·ªçc sinh:", students);
        return students;
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i danh s√°ch h·ªçc sinh:", error);
        return [];
    }
};

// H√†m t·∫£i danh s√°ch b√†i t·∫≠p t·ª´ `problems.json`
const loadProblems = async () => {
    try {
        const response = await fetch('/api/get-problems');
        if (!response.ok) {
            throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√†i t·∫≠p!");
        }
        const problems = await response.json();
        console.log("‚úÖ Danh s√°ch b√†i t·∫≠p:", problems);
        displayProblemList(problems);
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i danh s√°ch b√†i t·∫≠p:", error);
    }
};

// Hi·ªÉn th·ªã danh s√°ch b√†i t·∫≠p
function displayProblemList(problems) {
    const problemContainer = document.getElementById("problemList");
    problemContainer.innerHTML = ""; // X√≥a danh s√°ch c≈© n·∫øu c√≥

    problems.forEach(problem => {
        const problemBox = document.createElement("div");
        problemBox.textContent = problem.index;
        problemBox.className = "problem-box";
        problemBox.dataset.id = problem.index;

        function updateProblemColor() {
            if (progressData[problem.index]) {
                problemBox.style.backgroundColor = "green"; // B√†i ƒë√£ l√†m
            } else {
                problemBox.style.backgroundColor = "yellow"; // B√†i ch∆∞a l√†m
            }
        }

        updateProblemColor();

        problemBox.addEventListener("click", async () => {
            if (progressData[problem.index]) {
                alert("üìå B√†i t·∫≠p n√†y ƒë√£ l√†m! Vui l√≤ng ch·ªçn b√†i t·∫≠p kh√°c ho·∫∑c ch·ªçn b√†i t∆∞∆°ng t·ª±.");
                return;
            }
            displayProblem(problem); // Hi·ªÉn th·ªã n·ªôi dung b√†i t·∫≠p
        });

        problemContainer.appendChild(problemBox);
    });

    console.log("‚úÖ Danh s√°ch b√†i t·∫≠p ƒë√£ c·∫≠p nh·∫≠t.");
}

// Hi·ªÉn th·ªã n·ªôi dung b√†i t·∫≠p khi h·ªçc sinh ch·ªçn b√†i
function displayProblem(problem) {
    document.getElementById("problemText").innerHTML = problem.problem; // Hi·ªÉn th·ªã ƒë·ªÅ b√†i
    currentProblem = problem; // L∆∞u b√†i t·∫≠p hi·ªán t·∫°i
    MathJax.typesetPromise([document.getElementById("problemText")]).catch(err => console.error("MathJax l·ªói:", err));
}

// T·∫£i ti·∫øn tr√¨nh h·ªçc sinh
async function loadProgress(studentId) {
    try {
        const response = await fetch(`/api/get-progress?studentId=${studentId}`);
        const progress = await response.json();
        progressData = progress || {}; // L∆∞u v√†o bi·∫øn to√†n c·ª•c
        console.log(`‚úÖ Ti·∫øn tr√¨nh c·ªßa h·ªçc sinh ${studentId}:`, progressData);
        updateProgressUI();
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i ti·∫øn tr√¨nh:", error);
    }
}

// C·∫≠p nh·∫≠t ti·∫øn tr√¨nh UI
function updateProgressUI() {
    document.getElementById("completedExercises").textContent = progressData.completedExercises || 0;
    document.getElementById("averageScore").textContent = progressData.averageScore || 0;
}

// L∆∞u ti·∫øn tr√¨nh h·ªçc sinh v√†o `progress.json`
async function saveProgress(studentId, score) {
    try {
        let completedExercises = progressData.completedExercises || 0;
        let totalScore = (progressData.averageScore || 0) * completedExercises;
        completedExercises += 1;
        let averageScore = (totalScore + score) / completedExercises;

        progressData.completedExercises = completedExercises;
        progressData.averageScore = averageScore;

        await fetch("/api/save-progress", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ studentId, completedExercises, averageScore })
        });

        console.log(`‚úÖ Ti·∫øn tr√¨nh ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t: ${completedExercises} b√†i, ƒêi·ªÉm TB: ${averageScore.toFixed(2)}`);
    } catch (error) {
        console.error("‚ùå L·ªói khi l∆∞u ti·∫øn tr√¨nh:", error);
    }
}

// Chuy·ªÉn ƒë·ªïi ·∫£nh th√†nh Base64
function getBase64(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => resolve(reader.result.split(",")[1]);
        reader.onerror = error => reject(error);
    });
}

// H√†m l·∫•y API key ti·∫øp theo t·ª´ danh s√°ch
function getNextApiKey() {
    const apiKey = apiKeys[currentKeyIndex];
    currentKeyIndex = (currentKeyIndex + 1) % apiKeys.length;
    return apiKey;
}

document.addEventListener("DOMContentLoaded", async function () {
    await loadApiKeys(); // T·∫£i API keys khi trang ƒë∆∞·ª£c t·∫£i
    await initStudentPage();
});
// H√†m g·ª≠i y√™u c·∫ßu API v·ªõi API key
async function makeApiRequest(apiUrl, requestBody) {
    let attempts = 0;
    while (attempts < apiKeys.length) {
        const apiKey = getNextApiKey(); // L·∫•y API key t·ª´ danh s√°ch
        try {
            const response = await fetch(`${apiUrl}?key=${apiKey}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(requestBody),
            });

            if (response.ok) {
                return await response.json();
            } else if (response.status === 403) {
                console.log(`API key expired: ${apiKey}`);
                attempts++;
            } else {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
        } catch (error) {
            console.error('API error:', error);
            attempts++;
        }
    }
    throw new Error('All API keys exhausted.');
}
// H√†m g·ªçi API Gemini ƒë·ªÉ ch·∫•m b√†i
async function gradeWithGemini(base64Image, problemText, studentId) {
    const apiUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-002:generateContent';

    // Format ƒë·ªÅ b√†i tr∆∞·ªõc khi g·ª≠i l√™n API
    const formattedProblemText = formatProblemText(problemText);

    const promptText = `
H·ªçc sinh: ${studentId}
ƒê·ªÅ b√†i:
${formattedProblemText}

H√£y th·ª±c hi·ªán c√°c b∆∞·ªõc sau:
1. C·ªë g·∫Øng nh·∫≠n di·ªán b√†i l√†m c·ªßa h·ªçc sinh t·ª´ h√¨nh ·∫£nh, ngay c·∫£ khi h√¨nh ·∫£nh kh√¥ng r√µ r√†ng. 
2. N·∫øu kh√¥ng ch·∫Øc ch·∫Øn, h√£y ƒëo√°n n·ªôi dung g·∫ßn nh·∫•t c√≥ th·ªÉ.
3. N·∫øu b√†i l√†m sai, v·∫´n tr·∫£ v·ªÅ k·∫øt qu·∫£ v·ªõi nh·∫≠n x√©t ph√π h·ª£p thay v√¨ n√≥i "Kh√¥ng th·ªÉ nh·∫≠n di·ªán".
4. Gi·∫£i b√†i to√°n v√† ƒë∆∞a ra l·ªùi gi·∫£i chi ti·∫øt theo ch∆∞∆°ng tr√¨nh l·ªõp 7.
5. So s√°nh b√†i l√†m c·ªßa h·ªçc sinh v·ªõi ƒë√°p √°n ƒë√∫ng v√† ch·∫•m ƒëi·ªÉm.
6. Ch·∫•m ƒëi·ªÉm tr√™n thang 10, n·∫øu sai ho√†n to√†n th√¨ cho 0 ƒëi·ªÉm.
7. ƒê∆∞a ra nh·∫≠n x√©t chi ti·∫øt v√† ƒë·ªÅ xu·∫•t c·∫£i thi·ªán.
8. Tr·∫£ v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng JSON sau:

{
  "studentAnswer": "[N·ªôi dung nh·∫≠n di·ªán]",
  "detailedSolution": "[L·ªùi gi·∫£i t·ª´ng b∆∞·ªõc]",
  "gradingDetails": "[Gi·∫£i th√≠ch c√°ch ch·∫•m]",
  "score": [S·ªë t·ª´ 0-10],
  "feedback": "[Nh·∫≠n x√©t chi ti·∫øt]",
  "suggestions": "[C√°c ƒë·ªÅ xu·∫•t]"
}

N·∫øu kh√¥ng th·ªÉ nh·∫≠n di·ªán ho·∫∑c l·ªói, v·∫´n ph·∫£i tr·∫£ v·ªÅ JSON h·ª£p l·ªá v·ªõi studentAnswer l√† "Kh√¥ng r√µ".
`;

    console.log("üì° ƒêang g·ª≠i y√™u c·∫ßu API v·ªõi prompt:");
    console.log(promptText);

    // Lo·∫°i b·ªè ti·ªÅn t·ªë "data:image/jpeg;base64," ƒë·ªÉ ƒë·∫£m b·∫£o ƒë√∫ng ƒë·ªãnh d·∫°ng Google y√™u c·∫ßu
    const base64Data = base64Image.replace(/^data:image\/\w+;base64,/, "");
    console.log("üì∑ Base64 g·ª≠i ƒëi (ƒë√£ lo·∫°i b·ªè ti·ªÅn t·ªë):", base64Data.substring(0, 100) + "...");

    const requestBody = {
        contents: [
            {
                parts: [
                    { text: promptText },
                    { inline_data: { mime_type: "image/jpeg", data: base64Data } } // D·ªØ li·ªáu ·∫£nh chu·∫©n
                ]
            }
        ]
    };

    console.log("üì° D·ªØ li·ªáu g·ª≠i l√™n API:", JSON.stringify(requestBody, null, 2));

    try {
        const data = await makeApiRequest(apiUrl, requestBody);

        console.log("üì° Ph·∫£n h·ªìi API ngay sau khi g·ª≠i:", JSON.stringify(data, null, 2));

        if (!data?.candidates?.length || !data.candidates[0]?.content?.parts?.length) {
            throw new Error("API kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu h·ª£p l·ªá.");
        }

        let responseText = data.candidates[0].content.parts[0].text;

        if (!responseText) {
            throw new Error("API tr·∫£ v·ªÅ ph·∫£n h·ªìi r·ªóng.");
        }

        // üëâ T√¨m JSON h·ª£p l·ªá trong ph·∫£n h·ªìi
        const jsonMatch = responseText.match(/\{[\s\S]*\}/);
        if (!jsonMatch) {
            console.error("‚ùå API tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng ph·∫£i JSON h·ª£p l·ªá:", responseText);
            throw new Error("API kh√¥ng tr·∫£ v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng JSON.");
        }

        let jsonResponse;
        try {
            jsonResponse = JSON.parse(jsonMatch[0]); // Ch·ªâ parse ph·∫ßn JSON t√¨m ƒë∆∞·ª£c
        } catch (jsonError) {
            console.error("‚ùå L·ªói khi parse JSON t·ª´ API:", jsonError);
            console.log("D·ªØ li·ªáu API nh·∫≠n ƒë∆∞·ª£c:", responseText);
            throw new Error("API kh√¥ng tr·∫£ v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng JSON.");
        }

        return jsonResponse;
    } catch (error) {
        console.error('‚ùå L·ªói khi x·ª≠ l√Ω API Gemini:', error);
        return {
            studentAnswer: "L·ªói x·ª≠ l√Ω",
            detailedSolution: "L·ªói x·ª≠ l√Ω",
            gradingDetails: "L·ªói x·ª≠ l√Ω",
            score: 0,
            feedback: `L·ªói: ${error.message}`,
            suggestions: "L·ªói x·ª≠ l√Ω"
        };
    }
}

// H√†m x·ª≠ l√Ω ·∫£nh tr∆∞·ªõc khi g·ª≠i l√™n AI (ƒê√É S·ª¨A L·∫†I)
async function preprocessImage(imageFile) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();

        reader.onload = function () {
            console.log("üì∑ ƒê√£ ƒë·ªçc ·∫£nh th√†nh c√¥ng!");

            const img = new Image();
            img.src = reader.result;

            img.onload = function () {
                console.log(`üìè K√≠ch th∆∞·ªõc ·∫£nh g·ªëc: ${img.width}x${img.height}`);

                const canvas = document.createElement("canvas");
                const ctx = canvas.getContext("2d");

                // Resize ·∫£nh n·∫øu qu√° l·ªõn
                const maxSize = 800;
                let width = img.width;
                let height = img.height;
                if (width > maxSize || height > maxSize) {
                    if (width > height) {
                        height *= maxSize / width;
                        width = maxSize;
                    } else {
                        width *= maxSize / height;
                        height = maxSize;
                    }
                }

                canvas.width = width;
                canvas.height = height;
                ctx.drawImage(img, 0, 0, width, height);

                console.log(`üìè ·∫¢nh sau khi resize: ${canvas.width}x${canvas.height}`);

                // Chuy·ªÉn ·∫£nh sang grayscale
                const imageData = ctx.getImageData(0, 0, width, height);
                for (let i = 0; i < imageData.data.length; i += 4) {
                    const avg = (imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2]) / 3;
                    imageData.data[i] = avg; // R
                    imageData.data[i + 1] = avg; // G
                    imageData.data[i + 2] = avg; // B
                }
                ctx.putImageData(imageData, 0, 0);

                console.log("‚úÖ ·∫¢nh ƒë√£ x·ª≠ l√Ω th√†nh c√¥ng!");

                resolve(canvas.toDataURL("image/jpeg"));
            };

            img.onerror = function (err) {
                console.error("‚ùå L·ªói khi t·∫£i ·∫£nh:", err);
                reject("L·ªói khi t·∫£i ·∫£nh.");
            };
        };

        reader.onerror = function (err) {
            console.error("‚ùå L·ªói khi ƒë·ªçc ·∫£nh:", err);
            reject("L·ªói khi ƒë·ªçc ·∫£nh.");
        };

        reader.readAsDataURL(imageFile);
    });
}

// H√†m khi nh·∫•n n√∫t "Ch·∫•m b√†i"
document.getElementById("submitBtn").addEventListener("click", async () => {
    if (isGrading) {
        alert("‚è≥ H·ªá th·ªëng ƒëang ch·∫•m b√†i, vui l√≤ng ƒë·ª£i...");
        return;
    }

    if (!currentProblem) {
        alert("‚ö† Vui l√≤ng ch·ªçn b√†i t·∫≠p tr∆∞·ªõc khi ch·∫•m.");
        return;
    }

    const studentId = localStorage.getItem("studentId");
    const problemText = document.getElementById("problemText").innerText.trim();
    const studentFileInput = document.getElementById("studentImage");

    if (!problemText) {
        alert("‚ö† ƒê·ªÅ b√†i ch∆∞a ƒë∆∞·ª£c t·∫£i.");
        return;
    }

    let base64Image = null;

    if (studentFileInput.files.length > 0) {
        try {
            base64Image = await preprocessImage(studentFileInput.files[0]); // D√πng ·∫£nh ƒë√£ x·ª≠ l√Ω
        } catch (error) {
            alert("‚ùå L·ªói khi x·ª≠ l√Ω ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.");
            console.error("L·ªói khi x·ª≠ l√Ω ·∫£nh:", error);
            return;
        }
    }

    if (!base64Image) {
        alert("‚ö† Vui l√≤ng t·∫£i l√™n ·∫£nh b√†i l√†m ho·∫∑c ch·ª•p ·∫£nh t·ª´ camera.");
        return;
    }

    try {
        isGrading = true;
        document.getElementById("result").innerText = "üîÑ ƒêang ch·∫•m b√†i...";

        // G·ªçi API ch·∫•m b√†i
        const response = await gradeWithGemini(base64Image, problemText, studentId);

        // Hi·ªÉn th·ªã k·∫øt qu·∫£
        document.getElementById("result").innerHTML = `<pre>${JSON.stringify(response, null, 2)}</pre>`;

    } catch (error) {
        console.error("‚ùå L·ªói khi ch·∫•m b√†i:", error);
        document.getElementById("result").innerText = `‚ùå L·ªói: ${error.message}`;
    } finally {
        isGrading = false;
    }
});

