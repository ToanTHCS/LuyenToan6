let currentKeyIndex = 0;  // Ch·ªâ m·ª•c API Key hi·ªán t·∫°i
let apiKeys = [];  // Danh s√°ch API Keys
let base64Image = ""; // L∆∞u ·∫£nh b√†i l√†m
let progressData = {}; // L∆∞u ti·∫øn tr√¨nh h·ªçc sinh
let currentProblem = null; // L∆∞u b√†i t·∫≠p hi·ªán t·∫°i
let isGrading = false; // Tr·∫°ng th√°i ch·ªëng spam

// üõ† T·∫£i danh s√°ch API Keys t·ª´ server
async function loadApiKeys() {
    try {
        const response = await fetch('/api/get-api-keys');
        if (!response.ok) throw new Error('Kh√¥ng th·ªÉ t·∫£i API keys');

        const data = await response.json();
        apiKeys = data.apiKeys.filter(key => key);  // L·ªçc ra API Key h·ª£p l·ªá

        if (apiKeys.length === 0) throw new Error("Kh√¥ng c√≥ API keys h·ª£p l·ªá.");
        console.log(`‚úÖ ƒê√£ t·∫£i ${apiKeys.length} API keys`);
    } catch (error) {
        console.error('‚ùå L·ªói khi t·∫£i API keys:', error);
    }
}

// üõ† Ch·ªçn API Key ti·∫øp theo ƒë·ªÉ lu√¢n phi√™n
function getNextApiKey() {
    if (apiKeys.length === 0) {
        console.error("‚ùå Kh√¥ng c√≥ API keys n√†o kh·∫£ d·ª•ng!");
        return null;
    }
    const apiKey = apiKeys[currentKeyIndex];
    currentKeyIndex = (currentKeyIndex + 1) % apiKeys.length;  // Chuy·ªÉn sang API Key ti·∫øp theo
    return apiKey;
}

// üõ† G·ª≠i request API c√≥ lu√¢n phi√™n API Key v√† retry khi l·ªói
async function makeApiRequest(url, body, maxRetries = 5, delay = 5000) {
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            const apiKey = getNextApiKey(); // L·∫•y API Key ti·∫øp theo
            if (!apiKey) throw new Error("Kh√¥ng t√¨m th·∫•y API Key ƒë·ªÉ s·ª≠ d·ª•ng.");
            console.log(`üîë D√πng API Key: ${apiKey} (L·∫ßn th·ª≠: ${attempt})`);

            const response = await fetch(`${url}?key=${apiKey}`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(body)
            });

            if (response.status === 403 || response.status === 429) {
                console.warn(`‚ö†Ô∏è API Key b·ªã ch·∫∑n (403/429). Chuy·ªÉn sang API Key ti·∫øp theo...`);
                await new Promise(res => setTimeout(res, delay));  // ƒê·ª£i tr∆∞·ªõc khi th·ª≠ l·∫°i
                continue;
            }

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            return await response.json();

        } catch (error) {
            console.error(`‚ùå API l·ªói (l·∫ßn th·ª≠ ${attempt}):`, error);
            if (attempt === maxRetries) throw new Error("API l·ªói sau nhi·ªÅu l·∫ßn th·ª≠.");
            await new Promise(res => setTimeout(res, delay));  // ƒê·ª£i tr∆∞·ªõc khi th·ª≠ l·∫°i
        }
    }
}

// üõ† T·∫£i danh s√°ch b√†i t·∫≠p t·ª´ API
async function loadProblems() {
    try {
        const response = await fetch('/api/get-problems');
        if (!response.ok) {
            throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√†i t·∫≠p!");
        }
        const problems = await response.json();
        console.log("‚úÖ Danh s√°ch b√†i t·∫≠p:", problems);
        displayProblemList(problems); // Hi·ªÉn th·ªã danh s√°ch b√†i t·∫≠p
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i danh s√°ch b√†i t·∫≠p:", error);
    }
}

// üõ† Hi·ªÉn th·ªã danh s√°ch b√†i t·∫≠p
function displayProblemList(problems) {
    const problemContainer = document.getElementById("problemList");
    if (!problemContainer) {
        console.error("‚ùå Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ #problemList ƒë·ªÉ hi·ªÉn th·ªã b√†i t·∫≠p!");
        return;
    }

    problemContainer.innerHTML = ""; // X√≥a danh s√°ch c≈© n·∫øu c√≥

    problems.forEach(problem => {
        const problemBox = document.createElement("div");
        problemBox.textContent = problem.index;
        problemBox.className = "problem-box";
        problemBox.dataset.id = problem.index;

        problemBox.addEventListener("click", () => {
            displayProblem(problem); // Hi·ªÉn th·ªã n·ªôi dung b√†i t·∫≠p khi ng∆∞·ªùi d√πng nh·∫•n v√†o
        });

        problemContainer.appendChild(problemBox);
    });

    console.log("‚úÖ Danh s√°ch b√†i t·∫≠p ƒë√£ c·∫≠p nh·∫≠t.");
}

// üõ† Hi·ªÉn th·ªã b√†i t·∫≠p khi ch·ªçn
function displayProblem(problem) {
    document.getElementById("problemText").innerText = problem.problem;
    currentProblem = problem;
}

// G·ªçi h√†m loadProblems() khi trang t·∫£i xong
document.addEventListener("DOMContentLoaded", async function () {
    await loadApiKeys();
    await loadProblems();
    console.log("‚úÖ ƒê√£ t·∫£i API Keys v√† danh s√°ch b√†i t·∫≠p!");
});
