let currentKeyIndex = 0;  // Bi·∫øn ƒë·ªÉ theo d√µi API key ƒëang s·ª≠ d·ª•ng
let base64Image = ""; // Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u ·∫£nh b√†i l√†m
let progressData = {}; // Bi·∫øn l∆∞u ti·∫øn tr√¨nh h·ªçc sinh
let currentProblem = null; // Bi·∫øn l∆∞u b√†i t·∫≠p hi·ªán t·∫°i
let isGrading = false; // Bi·∫øn tr·∫°ng th√°i ƒë·ªÉ ch·ªëng spam
let apiKey = ""; // Khai b√°o bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u API Key

function formatProblemText(problemText) {
    return problemText.replace(/\n/g, '<br>').replace(/([a-d]\))/g, '<br>$1');
}
// T·∫£i API key t·ª´ server
async function loadApiKey() {
    try {
        const response = await fetch('/api/get-api-keys'); // G·ªçi API get-api-keys
        if (!response.ok) {
            throw new Error('Kh√¥ng th·ªÉ t·∫£i API key');
        }
        const data = await response.json();
        apiKey = data.apiKey;  // L∆∞u API key duy nh·∫•t
        console.log('‚úÖ API Key:', apiKey);

        if (!apiKey) {
            console.error("Kh√¥ng c√≥ API Key h·ª£p l·ªá.");
        }
    } catch (error) {
        console.error('‚ùå L·ªói khi t·∫£i API Key:', error);
    }
}

// H√†m kh·ªüi t·∫°o trang h·ªçc sinh
async function initStudentPage() {
    const studentId = localStorage.getItem("studentId");
    if (!studentId) {
        alert("‚ö† B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        window.location.href = "index.html"; // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p
        return;
    }

    console.log(`üîπ ƒêang t·∫£i d·ªØ li·ªáu h·ªçc sinh: ${studentId}`);
    await loadStudentData(studentId);
    await loadProblems();
    await loadProgress(studentId);
    updateProblemColors(); // C·∫≠p nh·∫≠t m√†u b√†i t·∫≠p ƒë√£ l√†m
    
    console.log("‚úÖ Trang h·ªçc sinh ƒë√£ kh·ªüi t·∫°o ho√†n t·∫•t!");
}

// H√†m t·∫£i d·ªØ li·ªáu h·ªçc sinh t·ª´ `students.json`
const loadStudentData = async (studentId) => {
    try {
        const response = await fetch('/api/get-students');
        if (!response.ok) {
            throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch h·ªçc sinh.");
        }
        const studentsObject = await response.json();  // L·∫•y d·ªØ li·ªáu t·ª´ API

        const students = Object.keys(studentsObject).map(key => ({
            id: key,
            name: studentsObject[key].name,
            role: studentsObject[key].role
        }));

        console.log("‚úÖ Danh s√°ch h·ªçc sinh:", students);
        return students;
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i danh s√°ch h·ªçc sinh:", error);
        return [];
    }
};

// H√†m t·∫£i danh s√°ch b√†i t·∫≠p t·ª´ `problems.json`
const loadProblems = async () => {
    try {
        const response = await fetch('/api/get-problems');
        if (!response.ok) {
            throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√†i t·∫≠p!");
        }
        const problems = await response.json();
        console.log("‚úÖ Danh s√°ch b√†i t·∫≠p:", problems);
        displayProblemList(problems);
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i danh s√°ch b√†i t·∫≠p:", error);
    }
};

// Hi·ªÉn th·ªã danh s√°ch b√†i t·∫≠p
function displayProblemList(problems) {
    const problemContainer = document.getElementById("problemList");
    problemContainer.innerHTML = ""; // X√≥a danh s√°ch c≈© n·∫øu c√≥

    console.log("üìå T·ªïng s·ªë b√†i t·∫≠p:", problems.length);
    
    problems.forEach(problem => {
        console.log(`üìù ƒêang t·∫°o b√†i t·∫≠p: ${problem.index} - ${problem.problem}`);

        const problemBox = document.createElement("div");
        problemBox.textContent = `B√†i ${problem.index}`;
        problemBox.className = "problem-box";
        problemBox.dataset.id = String(problem.index); // Chuy·ªÉn th√†nh string ƒë·ªÉ so s√°nh ƒë√∫ng

        // Ki·ªÉm tra xem b√†i t·∫≠p n√†y ƒë√£ l√†m ch∆∞a
        if (progressData.problemsDone && progressData.problemsDone.includes(problem.index)) {
            problemBox.style.backgroundColor = "green"; // B√†i ƒë√£ l√†m
            console.log(`üü¢ B√†i ${problem.index} ƒë√£ l√†m`);
        } else {
            problemBox.style.backgroundColor = "yellow"; // B√†i ch∆∞a l√†m
            console.log(`üü° B√†i ${problem.index} ch∆∞a l√†m`);
        }

        problemBox.addEventListener("click", async () => {
            if (progressData.problemsDone && progressData.problemsDone.includes(problem.index)) {
                alert("üìå B√†i t·∫≠p n√†y ƒë√£ l√†m! Vui l√≤ng ch·ªçn b√†i t·∫≠p kh√°c ho·∫∑c ch·ªçn b√†i t∆∞∆°ng t·ª±.");
                return;
            }
            displayProblem(problem); // Hi·ªÉn th·ªã n·ªôi dung b√†i t·∫≠p
        });

        problemContainer.appendChild(problemBox);
    });

    console.log("‚úÖ Danh s√°ch b√†i t·∫≠p ƒë√£ c·∫≠p nh·∫≠t.");
}

// Hi·ªÉn th·ªã n·ªôi dung b√†i t·∫≠p khi h·ªçc sinh ch·ªçn b√†i
function displayProblem(problem) {
    document.getElementById("problemText").innerHTML = problem.problem; // Hi·ªÉn th·ªã ƒë·ªÅ b√†i
    currentProblem = problem; // L∆∞u b√†i t·∫≠p hi·ªán t·∫°i
    MathJax.typesetPromise([document.getElementById("problemText")]).catch(err => console.error("MathJax l·ªói:", err));
}

// T·∫£i ti·∫øn tr√¨nh h·ªçc sinh
async function loadProgress(studentId, forceReload = false) {
    try {
        console.log(`üîπ ƒêang t·∫£i ti·∫øn tr√¨nh cho h·ªçc sinh: ${studentId}`);

        // üÜï Th√™m timestamp ƒë·ªÉ ngƒÉn tr√¨nh duy·ªát cache d·ªØ li·ªáu c≈©
        const url = `/api/get-progress?studentId=${studentId}&t=${new Date().getTime()}`;

        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`Kh√¥ng th·ªÉ t·∫£i ti·∫øn tr√¨nh (M√£ l·ªói: ${response.status})`);
        }

        const progress = await response.json();
        if (!progress || Object.keys(progress).length === 0) {
            throw new Error(`‚ùå Kh√¥ng t√¨m th·∫•y ti·∫øn tr√¨nh c·ªßa h·ªçc sinh ${studentId}.`);
        }

        progressData = progress;
        console.log(`‚úÖ Ti·∫øn tr√¨nh c·ªßa h·ªçc sinh ${studentId}:`, progressData);

        updateProgressUI();
        updateProblemColors();
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i ti·∫øn tr√¨nh:", error);
        alert("‚ö† Kh√¥ng th·ªÉ t·∫£i ti·∫øn tr√¨nh h·ªçc sinh! H√£y ki·ªÉm tra l·∫°i d·ªØ li·ªáu.");
    }
}

// ‚úÖ C·∫≠p nh·∫≠t m√†u s·∫Øc b√†i t·∫≠p d·ª±a tr√™n ti·∫øn tr√¨nh h·ªçc sinh
function updateProblemColors() {
    const problemBoxes = document.querySelectorAll(".problem-box");

    console.log("üìå ƒêang c·∫≠p nh·∫≠t m√†u b√†i t·∫≠p...");
    console.log("üìå Danh s√°ch b√†i ƒë√£ l√†m tr∆∞·ªõc khi c·∫≠p nh·∫≠t m√†u:", progressData.problemsDone);

    if (!Array.isArray(progressData.problemsDone)) {
        console.warn("‚ö† `progressData.problemsDone` kh√¥ng ph·∫£i l√† m·∫£ng ho·∫∑c ch∆∞a c√≥ d·ªØ li·ªáu.");
        return;
    }

    problemBoxes.forEach(box => {
        let problemKey = `B√†i ${box.dataset.id}`;

        if (progressData.problemsDone.includes(problemKey)) {
            box.style.backgroundColor = "green";
            console.log(`üü¢ ƒê·ªïi m√†u xanh: ${problemKey}`);
        } else {
            box.style.backgroundColor = "yellow";
            console.log(`üü° ƒê·ªïi m√†u v√†ng: ${problemKey}`);
        }
    });
}


// C·∫≠p nh·∫≠t ti·∫øn tr√¨nh UI
function updateProgressUI() {
    document.getElementById("completedExercises").textContent = progressData.completedExercises ?? 0;
    document.getElementById("averageScore").textContent = (progressData.averageScore ?? 0).toFixed(2);

}

// L∆∞u ti·∫øn tr√¨nh h·ªçc sinh v√†o `progress.json`
async function saveProgress(studentId, problemId, score) {
    try {
        if (!studentId || !problemId) {
            console.error("‚ùå Thi·∫øu studentId ho·∫∑c problemId!");
            return;
        }

        progressData.problemsDone = progressData.problemsDone || [];

        // üîπ ƒê·∫£m b·∫£o b√†i t·∫≠p l∆∞u d∆∞·ªõi d·∫°ng "B√†i X"
        let problemKey = `B√†i ${problemId}`;
        if (!progressData.problemsDone.includes(problemKey)) {
            progressData.problemsDone.push(problemKey);
            progressData.completedExercises = (progressData.completedExercises || 0) + 1;
            progressData.totalScore = (progressData.totalScore || 0) + score;
            progressData.averageScore = progressData.totalScore / progressData.completedExercises;
        }

        const requestData = {
            studentId: studentId,
            problemId: problemKey,
            completedExercises: progressData.completedExercises || 0,
            totalScore: progressData.totalScore || 0,
            averageScore: progressData.averageScore || 0,
            problemsDone: progressData.problemsDone || []
        };

        console.log("üìå G·ª≠i d·ªØ li·ªáu l√™n API save-progress:", JSON.stringify(requestData, null, 2));

        const response = await fetch("/api/save-progress", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(requestData)
        });

        const result = await response.json();
        if (response.ok) {
            console.log(`‚úÖ Ti·∫øn tr√¨nh c·ªßa ${studentId} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t:`, result);

            // üîÑ ƒê·ª£i 1 gi√¢y tr∆∞·ªõc khi t·∫£i l·∫°i d·ªØ li·ªáu ƒë·ªÉ tr√°nh l·ªói cache
            setTimeout(() => {
                console.log("üîÑ T·∫£i l·∫°i ti·∫øn tr√¨nh sau khi l∆∞u...");
                loadProgress(studentId, true); // üÜï Th√™m tham s·ªë ƒë·ªÉ bu·ªôc t·∫£i d·ªØ li·ªáu m·ªõi
            }, 1000);
        } else {
            console.error(`‚ùå L·ªói c·∫≠p nh·∫≠t ti·∫øn tr√¨nh (API Response):`, result);
        }
    } catch (error) {
        console.error("‚ùå L·ªói khi l∆∞u ti·∫øn tr√¨nh:", error);
    }
}

// Chuy·ªÉn ƒë·ªïi ·∫£nh th√†nh Base64
function getBase64(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => resolve(reader.result.split(",")[1]);
        reader.onerror = error => reject(error);
    });
}

document.addEventListener("DOMContentLoaded", async function () {
    await loadApiKey(); // T·∫£i API Key duy nh·∫•t khi trang ƒë∆∞·ª£c t·∫£i
    await initStudentPage();
});
// H√†m g·ª≠i y√™u c·∫ßu API v·ªõi API Key
async function makeApiRequest(apiUrl, requestBody) {
    console.log("üîπ ƒêang g·ª≠i request ƒë·∫øn Gemini API:", JSON.stringify(requestBody, null, 2)); // Log request
    try {
        const response = await fetch(`${apiUrl}?key=${apiKey}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(requestBody),
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error(`‚ùå API l·ªói ${response.status}:`, errorText); // Log l·ªói chi ti·∫øt
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        return await response.json();
    } catch (error) {
        console.error('‚ùå API error:', error);
        throw error;
    }
}

// H√†m g·ªçi API Gemini ƒë·ªÉ ch·∫•m b√†i
async function gradeWithGemini(base64Image, problemText, studentId) {
    const apiUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-002:generateContent';

    const promptText = `
H·ªçc sinh: ${studentId}
üìå ƒê·ªÅ b√†i:
${problemText}

üîπ **Y√™u c·∫ßu ch·∫•m b√†i:**
1Ô∏è‚É£ Nh·∫≠n di·ªán b√†i l√†m t·ª´ ·∫£nh v√† g√µ l·∫°i **ch√≠nh x√°c t·ª´ng k√Ω t·ª±, c√¥ng th·ª©c To√°n vi·∫øt d∆∞·ªõi d·∫°ng LaTeX**.
2Ô∏è‚É£ Gi·∫£i b√†i to√°n theo ƒë√∫ng y√™u c·∫ßu ƒë·ªÅ b√†i, cung c·∫•p l·ªùi gi·∫£i **chi ti·∫øt t·ª´ng b∆∞·ªõc**.
3Ô∏è‚É£ So s√°nh b√†i l√†m c·ªßa h·ªçc sinh v·ªõi ƒë√°p √°n ƒë√∫ng, **ch·∫•m ƒëi·ªÉm t·ª´ng b∆∞·ªõc** theo m·ª©c ƒë·ªô ch√≠nh x√°c.
4Ô∏è‚É£ Ch·∫•m ƒëi·ªÉm tr√™n thang **10**, cho **0 ƒëi·ªÉm n·∫øu b√†i l√†m sai ho√†n to√†n ho·∫∑c kh√¥ng kh·ªõp ƒë·ªÅ b√†i**.
5Ô∏è‚É£ ƒê∆∞a ra **nh·∫≠n x√©t chi ti·∫øt** v·ªÅ b√†i l√†m v√† **ƒë·ªÅ xu·∫•t c√°ch c·∫£i thi·ªán**.

‚ö† **Ch√∫ √Ω:**  
- Kh√¥ng t·ª± suy lu·∫≠n n·ªôi dung t·ª´ ·∫£nh, ch·ªâ g√µ l·∫°i ch√≠nh x√°c c√°c n·ªôi dung nh·∫≠n di·ªán ƒë∆∞·ª£c.  
- N·∫øu ·∫£nh kh√¥ng r√µ ho·∫∑c kh√¥ng th·ªÉ nh·∫≠n di·ªán, h√£y tr·∫£ v·ªÅ:  
\`\`\`json
{ "studentAnswer": "Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c b√†i l√†m", "score": 0 }
\`\`\`
- N·∫øu b√†i l√†m kh√¥ng kh·ªõp v·ªõi ƒë·ªÅ b√†i, v·∫´n ph·∫£i **ch·∫•m ƒëi·ªÉm c√¥ng b·∫±ng** d·ª±a tr√™n n·ªôi dung h·ªçc sinh l√†m ƒë∆∞·ª£c.

üìå **ƒê·ªãnh d·∫°ng JSON ph·∫£n h·ªìi b·∫Øt bu·ªôc:**
\`\`\`json
{
  "studentAnswer": "[N·ªôi dung nh·∫≠n di·ªán t·ª´ ·∫£nh]",
  "detailedSolution": "[L·ªùi gi·∫£i t·ª´ng b∆∞·ªõc]",
  "gradingDetails": "[C√°ch ch·∫•m ƒëi·ªÉm]",
  "score": [S·ªë t·ª´ 0-10],
  "feedback": "[Nh·∫≠n x√©t chi ti·∫øt]",
  "suggestions": "[ƒê·ªÅ xu·∫•t c·∫£i thi·ªán]"
}
\`\`\`
`;

    const requestBody = {
        contents: [
            {
                parts: [
                    { text: promptText },
                    { inline_data: { mime_type: "image/jpeg", data: base64Image } }
                ]
            }
        ]
    };

    console.log("üìå ƒêang g·ª≠i request ƒë·∫øn Gemini API...");
    console.log(JSON.stringify(requestBody, null, 2));

    try {
        const data = await makeApiRequest(apiUrl, requestBody);

        if (!data?.candidates?.length || !data.candidates[0]?.content?.parts?.length) {
            throw new Error("API kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu h·ª£p l·ªá.");
        }

        let responseText = data.candidates[0].content.parts[0].text;
        console.log("üìå Ph·∫£n h·ªìi t·ª´ API:", responseText);

        // üõë T√¨m JSON h·ª£p l·ªá trong ph·∫£n h·ªìi t·ª´ API
        const jsonMatch = responseText.match(/\{[\s\S]*\}/);
        if (!jsonMatch) throw new Error("API kh√¥ng tr·∫£ v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng JSON.");

        let parsedResponse = JSON.parse(jsonMatch[0]);

        // üõë Ki·ªÉm tra n·∫øu `studentAnswer` r·ªóng
        if (!parsedResponse.studentAnswer || parsedResponse.studentAnswer.trim() === "") {
            console.warn("‚ö† API kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c b√†i l√†m t·ª´ ·∫£nh.");
            parsedResponse.studentAnswer = "‚ö† Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c b√†i l√†m. Vui l√≤ng ki·ªÉm tra l·∫°i ·∫£nh.";
            parsedResponse.score = 0;
            parsedResponse.feedback = "H·ªá th·ªëng kh√¥ng th·ªÉ nh·∫≠n di·ªán b√†i l√†m c·ªßa b·∫°n t·ª´ ·∫£nh. H√£y th·ª≠ t·∫£i l√™n ·∫£nh r√µ r√†ng h∆°n.";
            parsedResponse.suggestions = "Vui l√≤ng s·ª≠ d·ª•ng ·∫£nh c√≥ ƒë·ªô ph√¢n gi·∫£i cao, kh√¥ng b·ªã m·ªù ho·∫∑c b·ªã che khu·∫•t.";
        }

        // üîπ Chuy·ªÉn ƒë·ªïi d·∫•u xu·ªëng d√≤ng "\n" th√†nh "<br>" tr∆∞·ªõc khi hi·ªÉn th·ªã
        function formatText(text) {
            return text.replace(/\n/g, "<br>");
        }

        parsedResponse.studentAnswer = formatText(parsedResponse.studentAnswer);
        parsedResponse.detailedSolution = formatText(parsedResponse.detailedSolution);
        parsedResponse.gradingDetails = formatText(parsedResponse.gradingDetails);
        parsedResponse.feedback = formatText(parsedResponse.feedback);
        parsedResponse.suggestions = formatText(parsedResponse.suggestions);

        console.log("üìå K·∫øt qu·∫£ ch·∫•m b√†i sau khi x·ª≠ l√Ω:", parsedResponse);
        return parsedResponse;

    } catch (error) {
        console.error('‚ùå L·ªói khi ch·∫•m b√†i:', error);
        return {
            studentAnswer: "L·ªói x·ª≠ l√Ω",
            detailedSolution: "L·ªói x·ª≠ l√Ω",
            gradingDetails: "L·ªói x·ª≠ l√Ω",
            score: 0,
            feedback: `L·ªói: ${error.message}`,
            suggestions: "L·ªói x·ª≠ l√Ω"
        };
    }
}
function displayResult(response) {
    const resultContainer = document.getElementById("result");

    if (!response || typeof response !== "object") {
        resultContainer.innerHTML = "<p>‚ùå L·ªói: Kh√¥ng c√≥ d·ªØ li·ªáu ph·∫£n h·ªìi t·ª´ API.</p>";
        return;
    }

    function formatText(text) {
        return text.replace(/\n/g, "<br>");
    }

    const formattedResponse = `
        <div class="result-box">
            <div class="result-section">
                <h3>üìå B√†i l√†m c·ªßa h·ªçc sinh:</h3>
                <p>${formatText(response.studentAnswer)}</p>
            </div>
            
            <div class="result-section">
                <h3>üìù L·ªùi gi·∫£i chi ti·∫øt:</h3>
                <p>${formatText(response.detailedSolution)}</p>
            </div>

            <div class="result-section">
                <h3>üìä C√°ch ch·∫•m ƒëi·ªÉm:</h3>
                <p>${formatText(response.gradingDetails)}</p>
            </div>

            <div class="result-section">
                <h3>üéØ ƒêi·ªÉm s·ªë: <span style="color: #d9534f; font-weight: bold;">${response.score}/10</span></h3>
            </div>

            <div class="result-section">
                <h3>üì¢ Nh·∫≠n x√©t:</h3>
                <p>${formatText(response.feedback)}</p>
            </div>

            <div class="result-section">
                <h3>üîç G·ª£i √Ω c·∫£i thi·ªán:</h3>
                <p>${formatText(response.suggestions)}</p>
            </div>
        </div>
    `;

    resultContainer.innerHTML = formattedResponse;
    MathJax.typesetPromise([resultContainer]).catch(err => console.error("MathJax rendering error:", err));
}


// H√†m x·ª≠ l√Ω ·∫£nh tr∆∞·ªõc khi g·ª≠i l√™n AI (ƒê√É S·ª¨A L·∫†I)
async function preprocessImage(imageFile) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();

        reader.onload = function () {
            console.log("üì∑ ƒê√£ ƒë·ªçc ·∫£nh th√†nh c√¥ng!");

            const img = new Image();
            img.src = reader.result;

            img.onload = function () {
                console.log(`üìè K√≠ch th∆∞·ªõc ·∫£nh g·ªëc: ${img.width}x${img.height}`);

                const canvas = document.createElement("canvas");
                const ctx = canvas.getContext("2d");

                // Resize ·∫£nh n·∫øu qu√° l·ªõn
                const maxSize = 800;
                let width = img.width;
                let height = img.height;
                if (width > maxSize || height > maxSize) {
                    if (width > height) {
                        height *= maxSize / width;
                        width = maxSize;
                    } else {
                        width *= maxSize / height;
                        height = maxSize;
                    }
                }

                canvas.width = width;
                canvas.height = height;
                ctx.drawImage(img, 0, 0, width, height);

                console.log(`üìè ·∫¢nh sau khi resize: ${canvas.width}x${canvas.height}`);

                // Chuy·ªÉn ·∫£nh sang grayscale
                const imageData = ctx.getImageData(0, 0, width, height);
                for (let i = 0; i < imageData.data.length; i += 4) {
                    const avg = (imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2]) / 3;
                    imageData.data[i] = avg; // R
                    imageData.data[i + 1] = avg; // G
                    imageData.data[i + 2] = avg; // B
                }
                ctx.putImageData(imageData, 0, 0);

                console.log("‚úÖ ·∫¢nh ƒë√£ x·ª≠ l√Ω th√†nh c√¥ng!");

                // L·∫•y d·ªØ li·ªáu Base64, lo·∫°i b·ªè ti·ªÅn t·ªë "data:image/jpeg;base64,"
                const base64Image = canvas.toDataURL("image/jpeg").split(",")[1];
                console.log("üìå Base64 ƒë√£ x·ª≠ l√Ω:", base64Image.substring(0, 100) + "..."); // Log 100 k√Ω t·ª± ƒë·∫ßu ƒë·ªÉ ki·ªÉm tra

                resolve(base64Image);
            };

            img.onerror = function (err) {
                console.error("‚ùå L·ªói khi t·∫£i ·∫£nh:", err);
                reject("L·ªói khi t·∫£i ·∫£nh.");
            };
        };

        reader.onerror = function (err) {
            console.error("‚ùå L·ªói khi ƒë·ªçc ·∫£nh:", err);
            reject("L·ªói khi ƒë·ªçc ·∫£nh.");
        };

        reader.readAsDataURL(imageFile);
    });
}


// H√†m khi nh·∫•n n√∫t "Ch·∫•m b√†i"
document.getElementById("submitBtn").addEventListener("click", async () => {
    if (isGrading) {
        alert("‚è≥ H·ªá th·ªëng ƒëang ch·∫•m b√†i, vui l√≤ng ƒë·ª£i...");
        return;
    }

    if (!currentProblem) {
        alert("‚ö† Vui l√≤ng ch·ªçn b√†i t·∫≠p tr∆∞·ªõc khi ch·∫•m.");
        return;
    }

    const studentId = localStorage.getItem("studentId");
    const problemText = document.getElementById("problemText").innerText.trim();
    const studentFileInput = document.getElementById("studentImage");

    if (!problemText) {
        alert("‚ö† ƒê·ªÅ b√†i ch∆∞a ƒë∆∞·ª£c t·∫£i.");
        return;
    }

    let base64Image = null;

    if (studentFileInput.files.length > 0) {
        try {
            base64Image = await preprocessImage(studentFileInput.files[0]); // D√πng ·∫£nh ƒë√£ x·ª≠ l√Ω
        } catch (error) {
            alert("‚ùå L·ªói khi x·ª≠ l√Ω ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.");
            console.error("L·ªói khi x·ª≠ l√Ω ·∫£nh:", error);
            return;
        }
    }

    if (!base64Image) {
        alert("‚ö† Vui l√≤ng t·∫£i l√™n ·∫£nh b√†i l√†m ho·∫∑c ch·ª•p ·∫£nh t·ª´ camera.");
        return;
    }

    try {
        isGrading = true;
        document.getElementById("result").innerText = "üîÑ ƒêang ch·∫•m b√†i...";

        // G·ªçi API ch·∫•m b√†i
        const response = await gradeWithGemini(base64Image, problemText, studentId);
        
        // Hi·ªÉn th·ªã k·∫øt qu·∫£
        displayResult(response);
        // ‚úÖ C·∫≠p nh·∫≠t ti·∫øn tr√¨nh sau khi ch·∫•m b√†i
        console.log("üîÑ ƒêang l∆∞u ti·∫øn tr√¨nh...");
        await saveProgress(studentId, currentProblem.index, response.score);
        
        // üîÑ ƒê·ª£i 1 gi√¢y ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
        setTimeout(async () => {
            console.log("üîÑ T·∫£i l·∫°i ti·∫øn tr√¨nh sau khi l∆∞u...");
            await loadProgress(studentId);
            updateProblemColors();
            updateProgressUI();
        }, 1000); // ƒê·ª£i 1 gi√¢y
       } catch (error) {
        console.error("‚ùå L·ªói khi ch·∫•m b√†i:", error);
        document.getElementById("result").innerText = `‚ùå L·ªói: ${error.message}`;
    } finally {
        isGrading = false;
    }
});
