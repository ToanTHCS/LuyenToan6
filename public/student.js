// student.js - Qu·∫£n l√Ω giao di·ªán h·ªçc sinh, g·ªçi API, ch·∫•m b√†i

import { loadProgress, saveProgress } from "./progress.js"; // Import t·ª´ progress.js

let currentKeyIndex = 0;  // Bi·∫øn ƒë·ªÉ theo d√µi API key ƒëang s·ª≠ d·ª•ng
let base64Image = ""; // Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u ·∫£nh b√†i l√†m
let progressData = {}; // Bi·∫øn l∆∞u ti·∫øn tr√¨nh h·ªçc sinh
let currentProblem = null; // Bi·∫øn l∆∞u b√†i t·∫≠p hi·ªán t·∫°i
let isGrading = false; // Bi·∫øn tr·∫°ng th√°i ƒë·ªÉ ch·ªëng spam
let apiKey = ""; // Bi·∫øn to√†n c·ª•c l∆∞u API Key

// ‚úÖ Format ƒë·ªÅ b√†i th√†nh HTML
function formatProblemText(problemText) {
    return problemText.replace(/\n/g, '<br>').replace(/([a-d]\))/g, '<br>$1');
}

// ‚úÖ T·∫£i API key t·ª´ server
async function loadApiKey() {
    try {
        const response = await fetch('/api/get-api-keys');
        if (!response.ok) throw new Error('Kh√¥ng th·ªÉ t·∫£i API key');
        const data = await response.json();
        apiKey = data.apiKey;  
        console.log('‚úÖ API Key:', apiKey);
    } catch (error) {
        console.error('‚ùå L·ªói khi t·∫£i API Key:', error);
    }
}

// ‚úÖ Kh·ªüi t·∫°o trang h·ªçc sinh
async function initStudentPage() {
    const studentId = localStorage.getItem("studentId");
    if (!studentId) {
        alert("‚ö† B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        window.location.href = "index.html";
        return;
    }

    console.log(`üîπ ƒêang t·∫£i d·ªØ li·ªáu h·ªçc sinh: ${studentId}`);
    await loadStudentData(studentId);
    await loadProblems();
    await loadProgress(studentId); // Load ti·∫øn tr√¨nh
    console.log("‚úÖ Trang h·ªçc sinh ƒë√£ kh·ªüi t·∫°o ho√†n t·∫•t!");
}

// ‚úÖ T·∫£i danh s√°ch h·ªçc sinh
async function loadStudentData(studentId) {
    try {
        const response = await fetch('/api/get-students');
        if (!response.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch h·ªçc sinh.");
        const studentsObject = await response.json();

        const students = Object.keys(studentsObject).map(key => ({
            id: key,
            name: studentsObject[key].name,
            role: studentsObject[key].role
        }));

        console.log("‚úÖ Danh s√°ch h·ªçc sinh:", students);
        return students;
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i danh s√°ch h·ªçc sinh:", error);
        return [];
    }
}

// ‚úÖ T·∫£i danh s√°ch b√†i t·∫≠p
async function loadProblems() {
    try {
        const response = await fetch('/api/get-problems');
        if (!response.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√†i t·∫≠p!");
        const problems = await response.json();
        console.log("‚úÖ Danh s√°ch b√†i t·∫≠p:", problems);
        displayProblemList(problems);
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i danh s√°ch b√†i t·∫≠p:", error);
    }
}

// ‚úÖ Hi·ªÉn th·ªã danh s√°ch b√†i t·∫≠p
function displayProblemList(problems) {
    const problemContainer = document.getElementById("problemList");
    problemContainer.innerHTML = ""; 

    problems.forEach(problem => {
        const problemBox = document.createElement("div");
        problemBox.textContent = problem.index;
        problemBox.className = "problem-box";
        problemBox.dataset.id = problem.index;

        function updateProblemColor() {
            if (progressData[problem.index]) {
                problemBox.style.backgroundColor = "green"; 
            } else {
                problemBox.style.backgroundColor = "yellow";
            }
        }

        updateProblemColor();

        problemBox.addEventListener("click", async () => {
            if (progressData[problem.index]) {
                alert("üìå B√†i t·∫≠p n√†y ƒë√£ l√†m! Vui l√≤ng ch·ªçn b√†i t·∫≠p kh√°c ho·∫∑c ch·ªçn b√†i t∆∞∆°ng t·ª±.");
                return;
            }
            displayProblem(problem);
        });

        problemContainer.appendChild(problemBox);
    });

    console.log("‚úÖ Danh s√°ch b√†i t·∫≠p ƒë√£ c·∫≠p nh·∫≠t.");
}

// ‚úÖ Hi·ªÉn th·ªã n·ªôi dung b√†i t·∫≠p
function displayProblem(problem) {
    document.getElementById("problemText").innerHTML = problem.problem;
    currentProblem = problem;
    MathJax.typesetPromise([document.getElementById("problemText")]).catch(err => console.error("MathJax l·ªói:", err));
}

// ‚úÖ Ch·∫•m b√†i v·ªõi Gemini AI
async function gradeWithGemini(base64Image, problemText, studentId) {
    const apiUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-002:generateContent';

    const promptText = `
H·ªçc sinh: ${studentId}
üìå ƒê·ªÅ b√†i:
${problemText}
üîπ **Y√™u c·∫ßu ch·∫•m b√†i:**
1Ô∏è‚É£ Nh·∫≠n di·ªán b√†i l√†m t·ª´ ·∫£nh v√† g√µ l·∫°i **ch√≠nh x√°c t·ª´ng k√Ω t·ª±, c√¥ng th·ª©c To√°n vi·∫øt d∆∞·ªõi d·∫°ng LaTeX**.
2Ô∏è‚É£ Gi·∫£i b√†i to√°n theo ƒë√∫ng y√™u c·∫ßu ƒë·ªÅ b√†i, cung c·∫•p l·ªùi gi·∫£i **chi ti·∫øt t·ª´ng b∆∞·ªõc**.
3Ô∏è‚É£ So s√°nh b√†i l√†m c·ªßa h·ªçc sinh v·ªõi ƒë√°p √°n ƒë√∫ng, **ch·∫•m ƒëi·ªÉm t·ª´ng b∆∞·ªõc** theo m·ª©c ƒë·ªô ch√≠nh x√°c.
4Ô∏è‚É£ Ch·∫•m ƒëi·ªÉm tr√™n thang **10**, cho **0 ƒëi·ªÉm n·∫øu b√†i l√†m sai ho√†n to√†n ho·∫∑c kh√¥ng kh·ªõp ƒë·ªÅ b√†i**.
5Ô∏è‚É£ ƒê∆∞a ra **nh·∫≠n x√©t chi ti·∫øt** v·ªÅ b√†i l√†m v√† **ƒë·ªÅ xu·∫•t c√°ch c·∫£i thi·ªán**.

üìå **ƒê·ªãnh d·∫°ng JSON ph·∫£n h·ªìi b·∫Øt bu·ªôc:**
{
  "studentAnswer": "[N·ªôi dung nh·∫≠n di·ªán t·ª´ ·∫£nh]",
  "detailedSolution": "[L·ªùi gi·∫£i t·ª´ng b∆∞·ªõc]",
  "gradingDetails": "[C√°ch ch·∫•m ƒëi·ªÉm]",
  "score": [S·ªë t·ª´ 0-10],
  "feedback": "[Nh·∫≠n x√©t chi ti·∫øt]",
  "suggestions": "[ƒê·ªÅ xu·∫•t c·∫£i thi·ªán]"
}`;

    const requestBody = {
        contents: [
            {
                parts: [
                    { text: promptText },
                    { inline_data: { mime_type: "image/jpeg", data: base64Image } }
                ]
            }
        ]
    };

    console.log("üìå ƒêang g·ª≠i request ƒë·∫øn Gemini API...");
    
    try {
        const response = await fetch(`${apiUrl}?key=${apiKey}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(requestBody),
        });

        if (!response.ok) throw new Error("API kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu h·ª£p l·ªá.");
        
        let data = await response.json();
        return JSON.parse(data.candidates[0].content.parts[0].text);

    } catch (error) {
        console.error('‚ùå L·ªói khi ch·∫•m b√†i:', error);
        return { score: 0, feedback: "L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i." };
    }
}

// ‚úÖ X·ª≠ l√Ω khi nh·∫•n "Ch·∫•m b√†i"
document.getElementById("submitBtn").addEventListener("click", async () => {
    if (isGrading) return alert("‚è≥ H·ªá th·ªëng ƒëang ch·∫•m b√†i...");

    if (!currentProblem) return alert("‚ö† Vui l√≤ng ch·ªçn b√†i t·∫≠p tr∆∞·ªõc khi ch·∫•m.");

    const studentId = localStorage.getItem("studentId");
    const problemText = document.getElementById("problemText").innerText.trim();
    const studentFileInput = document.getElementById("studentImage");

    if (!problemText) return alert("‚ö† ƒê·ªÅ b√†i ch∆∞a ƒë∆∞·ª£c t·∫£i.");

    let base64Image = null;
    if (studentFileInput.files.length > 0) {
        const file = studentFileInput.files[0];
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => base64Image = reader.result.split(",")[1];
    }

    if (!base64Image) return alert("‚ö† Vui l√≤ng t·∫£i l√™n ·∫£nh b√†i l√†m.");

    isGrading = true;
    const response = await gradeWithGemini(base64Image, problemText, studentId);
    
    await saveProgress(studentId, response.score);
    isGrading = false;
});
