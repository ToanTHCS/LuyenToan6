export default async function handler(req, res) {
    if (req.method !== "POST") {
        return res.status(405).json({ error: "Method Not Allowed" });
    }

    const { studentId, problemId, completedExercises, totalScore, averageScore, problemsDone } = req.body;
    if (!studentId || !problemId) {
        return res.status(400).json({ error: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc." });
    }

    try {
        // üîπ L·∫•y JSON hi·ªán t·∫°i t·ª´ GitHub
        const githubUrl = "https://raw.githubusercontent.com/OnToanAnhDuong/LuyenToan6/main/data/progress.json";
        const response = await fetch(githubUrl, { cache: "no-store" });
        if (!response.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i JSON t·ª´ GitHub.");

        let allProgress = await response.json();
        
        // üîÑ C·∫≠p nh·∫≠t ti·∫øn tr√¨nh h·ªçc sinh
        allProgress[studentId] = {
            completedExercises,
            totalScore,
            averageScore,
            problemsDone
        };

        // üìå Ghi l·∫°i JSON l√™n GitHub
        const githubApiUrl = "https://api.github.com/repos/OnToanAnhDuong/LuyenToan6/contents/data/progress.json";
        const githubToken = process.env.GITHUB_TOKEN;  // üîë L·∫•y token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng

        // L·∫•y SHA c·ªßa file hi·ªán t·∫°i
        const fileResponse = await fetch(githubApiUrl, {
            headers: { Authorization: `token ${githubToken}` }
        });
        const fileData = await fileResponse.json();
        const sha = fileData.sha;  // üîë C·∫ßn SHA ƒë·ªÉ ghi ƒë√® file

        // üìù C·∫≠p nh·∫≠t file tr√™n GitHub
        const updateResponse = await fetch(githubApiUrl, {
            method: "PUT",
            headers: {
                Authorization: `token ${githubToken}`,
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                message: `C·∫≠p nh·∫≠t ti·∫øn tr√¨nh h·ªçc sinh ${studentId}`,
                content: Buffer.from(JSON.stringify(allProgress, null, 2)).toString("base64"),
                sha
            })
        });

        if (!updateResponse.ok) throw new Error("L·ªói khi c·∫≠p nh·∫≠t JSON l√™n GitHub.");
        
        console.log(`‚úÖ C·∫≠p nh·∫≠t ti·∫øn tr√¨nh th√†nh c√¥ng:`, allProgress[studentId]);
        res.status(200).json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!", progress: allProgress[studentId] });
    } catch (error) {
        console.error("‚ùå L·ªói khi l∆∞u ti·∫øn tr√¨nh:", error);
        res.status(500).json({ error: error.message });
    }
}
